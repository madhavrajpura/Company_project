@model DataAccessLayer.ViewModels.OrderViewModel

<div class="d-flex justify-content-between">
    <h2>Create Order</h2>
    <a class="btn btn-secondary" asp-action="Index" asp-controller="Home">Back to Orders</a>
</div>


<form asp-action="Create" method="post" class="mt-4" id="orderForm">
    @Html.AntiForgeryToken()

    <div id="order-items">
        <div class="order-item form-group row mb-2" data-item-index="0">
            <div class="col-md-4 mt-4">
                <select name="OrderItems[0].ProductId" class="form-control product-select"
                    onchange="updateProduct(this, 0)" required>
                    <option value="">-- Select Product --</option>
                    @foreach (var ProductVM in Model.AvailableProducts)
                    {
                        <option value="@ProductVM.ProductId" data-name="@ProductVM.ProductName"
                            data-price="@ProductVM.Price">
                            @ProductVM.ProductName
                        </option>
                    }
                </select>
                <span class="text-danger field-validation-error" data-valmsg-for="OrderItems[0].ProductId"></span>
            </div>
            <div class="col-md-2 d-flex mt-4">
                <button type="button" class="btn btn-outline-secondary minus-btn"
                    onclick="changeQuantity(this, -1)">-</button>
                <input type="number" name="OrderItems[0].Quantity" class="form-control text-center mx-1 quantity-input"
                    value="1" min="1" required />
                <button type="button" class="btn btn-outline-secondary plus-btn"
                    onclick="changeQuantity(this, 1)">+</button>
            </div>
            <div class="col-md-2 mt-4">
                <input type="text" name="OrderItems[0].Price" class="form-control price-input" readonly />
                <input type="hidden" name="OrderItems[0].ProductName" class="product-name-hidden" />
            </div>
            <div class="col-md-2 mt-4">
                <button type="button" class="btn btn-danger remove-item" onclick="removeItem(this)"
                    style="display:none">Remove</button>
            </div>
        </div>
    </div>

    <button type="button" onclick="addNewItem()" class="btn btn-secondary mt-4" id="addProductBtn">
        Add Product
    </button>
    <hr />
    <div class="mt-4">
        <strong class="fs-5">Total Amount: </strong>
        <span id="total" class="fs-5">0</span>
    </div>
    <button type="submit" class="btn btn-primary mt-4" id="saveBtn">
        Save
    </button>
</form>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

    <script>
        let itemCount = 1;

        $(document).ready(function () {
            // Initialize total
            updateTotal();
            // Setup form validation
            $('#orderForm').validate({
                errorElement: 'span',
                errorClass: 'text-danger',
                submitHandler: function (form) {
                    if (isFormValid()) {
                        form.submit();
                    } else {
                        callErrorToaster('Please select a product and valid quantity for all items.');
                    }
                }
            });
        });

        function addNewItem() {
            // Check if existing items are valid
            if (!isFormValid()) {
                callErrorToaster('Please select a product for all items before adding another.');
                return;
            }

            // Clone the first item
            const item = $('.order-item:first').clone();
            item.attr('data-item-index', itemCount);

            // Update names and clear values
            item.find('select, input').each(function () {
                const name = $(this).attr('name');
                if (name) {
                    $(this).attr('name', name.replace(/\d+/, itemCount));
                }
                if ($(this).is('input')) {
                    if ($(this).hasClass('quantity-input')) {
                        $(this).val(1);
                    } else if (!$(this).hasClass('product-name-hidden')) {
                        $(this).val('');
                    }
                }
                if ($(this).is('select')) {
                    $(this).val('');
                }
            });

            // Show remove button and add to form
            item.find('.remove-item').show();
            $('#order-items').append(item);
            itemCount++;
            updateSaveButton();
        }

        function removeItem(button) {
            if ($('.order-item').length > 1) {
                $(button).closest('.order-item').remove();
                updateTotal();
                updateSaveButton();
            }
        }

        function updateProduct(select, index) {
            const selected = select.options[select.selectedIndex];
            const price = selected.dataset.price || '';
            const name = selected.dataset.name || '';
            const row = $(select).closest('.order-item');

            // Update price and name
            row.find('.price-input').val(price);
            row.find('.product-name-hidden').val(name);

            // Check for duplicate product
            if (selected.value && isDuplicateProduct(selected.value, row)) {
                callErrorToaster('This product is already selected.');
                $(select).val('');
                row.find('.price-input').val('');
                row.find('.product-name-hidden').val('');
            }

            updateTotal();
            updateSaveButton();
        }

        function isDuplicateProduct(productId, currentRow) {
            let isDuplicate = false;
            $('.product-select').not(currentRow.find('.product-select')).each(function () {
                if ($(this).val() === productId && productId !== '') {
                    isDuplicate = true;
                    return false;
                }
            });
            return isDuplicate;
        }

        function changeQuantity(button, change) {
            const input = $(button).parent().find('.quantity-input');
            const newValue = Math.max(1, parseInt(input.val()) + change);
            input.val(newValue);
            updateTotal();
            updateSaveButton();
        }

        function updateTotal() {
            let total = 0;
            $('.order-item').each(function () {
                const price = parseFloat($(this).find('.price-input').val()) || 0;
                const quantity = parseInt($(this).find('.quantity-input').val()) || 0;
                total += price * quantity;
            });
            $('#total').text(total.toFixed(2));
        }

        function isFormValid() {
            let isValid = true;
            $('.order-item').each(function () {
                const select = $(this).find('.product-select').val();
                const quantity = $(this).find('.quantity-input').val();
                if (!select || parseInt(quantity) < 1) {
                    isValid = false;
                    return false;
                }
            });
            return isValid;
        }

        function updateSaveButton() {
            $('#saveBtn').prop('disabled', !isFormValid() && $('.order-item').length > 1);
        }
    </script>
}